#include <bits/stdc++.h>
using namespace std;

int main()
{
return 0;
}

// calculator with virtual machine v0.0
// 
// grammar:
// cHJvZ3JhbSA6Oj0gdmFyX2RlY2xfZXhwciB8IGZ1bmNfZXhwciB8IGV4cHIKdmFyX2V4cHIgOjo9IDxWQVI+IDxJREVOVElGSUVSPiA8RVE+IGV4cHIKZnVuY19leHByIDo6PSA8RlVOQz4gPElERU5USUZJRVI+IDxMUEFSRU4+IGFyZ19saXN0PyA8UlBBUkVOPiA8QVJST1c+IGV4cHIKYXJnX2xpc3QgOjo9IDxJREVOVElGSUVSPiAoPENPTU1BPiA8SURFTlRJRklFUj4pKgpwYXJhbV9saXN0IDo6PSBleHByICg8Q09NTUE+IGV4cHIpKgphc3NpZ25fZXhwciA6Oj0gPElERU5USUZJRVI+IDxFUT4gZXhwcgpleHByIDo6PSB0ZXJtICg8UExVU3xNSU5VUz4gdGVybSkqCiAgICAgICB8IGFzc2lnbl9leHByCnRlcm0gOjo9IGZhY3RvciAoPE1VTHxESVY+IGZhY3RvcikqCmZhY3RvciA6Oj0gPE5VTUJFUj4KICAgICAgIHwgPElERU5USUZJRVI+ICg8TFBBUkVOPiBwYXJhbV9saXN0PyA8UlBBUkVOPik/CiAgICAgICB8IDxMUEFSRU4+IGV4cHIgPFJQQVJFTj4KICAgICAgIHwgPE1JTlVTPiBmYWN0b3I=

// this is definitely not cheating cuz it's literally not related with CSP-S
